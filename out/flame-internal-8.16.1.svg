<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="1200" height="150" onload="init(evt)" version="1.1" viewBox="0 0 1200 150"><defs><linearGradient id="background" x1="0" x2="0" y1="0" y2="1"><stop offset="5%" stop-color="#eee"/><stop offset="95%" stop-color="#eeeeb0"/></linearGradient></defs><style type="text/css">text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); } #search, #ignorecase { opacity:0.1; cursor:pointer; } #search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; } #subtitle { text-anchor:middle; font-color:rgb(160,160,160); } #title { text-anchor:middle; font-size:17px} #unzoom { cursor:pointer; } #frames &gt; *:hover { stroke:black; stroke-width:0.5; cursor:pointer; } .hide { display:none; } .parent { opacity:0.5; }</style><script type="text/ecmascript"><![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]></script><rect width="1200" height="150" x="0" y="0" fill="url(#background)"/><text id="title" x="600" y="24">Flame Graph</text><text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text><text id="search" x="1090" y="24">Search</text><text id="ignorecase" x="1174" y="24">ic</text><g id="frames"><g><title>BytecodeHandler:LdaGlobal (5 samples, 0.03%)</title><rect width=".4" height="15" x="390.5" y="69" fill="#F00704" rx="2" ry="2"/></g><g><title>BytecodeHandler:StaKeyedPropertyStrict (45 samples, 0.28%)</title><rect width="3.4" height="15" x="421.4" y="69" fill="#D09C1C" rx="2" ry="2"/></g><g><title>compare native intl.js:619 (5,632 samples, 35.55%)</title><rect width="419.5" height="15" x="535.8" y="37" fill="#FB2317" rx="2" ry="2"/><text x="538.75" y="47.5">compare native intl.js:619</text></g><g><title>BytecodeHandler:Add (5 samples, 0.03%)</title><rect width=".4" height="15" x="342.9" y="69" fill="#F7481D" rx="2" ry="2"/></g><g><title>BytecodeHandler:TestEqualStrict (2 samples, 0.01%)</title><rect width=".2" height="15" x="419.2" y="53" fill="#D9911A" rx="2" ry="2"/></g><g><title>BytecodeHandler:CreateClosure (5 samples, 0.03%)</title><rect width=".4" height="15" x="385.3" y="69" fill="#FC832F" rx="2" ry="2"/></g><g><title>BytecodeHandler:Inc (2 samples, 0.01%)</title><rect width=".1" height="15" x="387.1" y="69" fill="#D45C12" rx="2" ry="2"/></g><g><title>BytecodeHandler:LdaNamedProperty (179 samples, 1.13%)</title><rect width="13.3" height="15" x="406.3" y="69" fill="#F1BC1C" rx="2" ry="2"/></g><g><title>BytecodeHandler:StackCheck (2 samples, 0.01%)</title><rect width=".1" height="15" x="419.1" y="53" fill="#D32C10" rx="2" ry="2"/></g><g><title>BytecodeHandler:StaNamedOwnProperty (4 samples, 0.03%)</title><rect width=".3" height="15" x="425.1" y="69" fill="#FCD711" rx="2" ry="2"/></g><g><title>BytecodeHandler:Dec (2 samples, 0.01%)</title><rect width=".1" height="15" x="386.7" y="69" fill="#DC7017" rx="2" ry="2"/></g><g><title>BytecodeHandler:CreateFunctionContext (3 samples, 0.02%)</title><rect width=".2" height="15" x="385.7" y="69" fill="#D84C17" rx="2" ry="2"/></g><g><title>Unwrap native intl.js:70 (2,067 samples, 13.05%)</title><rect width="153.9" height="15" x="1032.8" y="37" fill="#E32718" rx="2" ry="2"/><text x="1035.75" y="47.5">Unwrap native intl...</text></g><g><title>BytecodeHandler:CallUndefinedReceiver2 (3 samples, 0.02%)</title><rect width=".3" height="15" x="345.4" y="69" fill="#E12322" rx="2" ry="2"/></g><g><title>BytecodeHandler:Return (12 samples, 0.08%)</title><rect width=".9" height="15" x="1031.4" y="37" fill="#F7912B" rx="2" ry="2"/></g><g><title>BytecodeHandler:StaKeyedPropertySloppy (8 samples, 0.05%)</title><rect width=".6" height="15" x="420.8" y="69" fill="#ED5F29" rx="2" ry="2"/></g><g><title>BytecodeHandler:CallRuntime (5 samples, 0.03%)</title><rect width=".3" height="15" x="406.4" y="53" fill="#E19E05" rx="2" ry="2"/></g><g><title>StoreIC:A store IC from the snapshot (2 samples, 0.01%)</title><rect width=".1" height="15" x="384.8" y="37" fill="#E7BF09" rx="2" ry="2"/></g><g><title>BytecodeHandler:CreateObjectLiteral (8 samples, 0.05%)</title><rect width=".6" height="15" x="385.9" y="69" fill="#FE4608" rx="2" ry="2"/></g><g><title>BytecodeHandler:TestLessThan (4 samples, 0.03%)</title><rect width=".3" height="15" x="428.3" y="69" fill="#D66308" rx="2" ry="2"/></g><g><title>BytecodeHandler:Construct (2 samples, 0.01%)</title><rect width=".1" height="15" x="383.6" y="53" fill="#FCBD28" rx="2" ry="2"/></g><g><title>BytecodeHandler:JumpLoop (26 samples, 0.16%)</title><rect width="1.9" height="15" x="388.4" y="69" fill="#D9AD03" rx="2" ry="2"/></g><g><title>BytecodeHandler:Mov (2 samples, 0.01%)</title><rect width=".1" height="15" x="418.4" y="53" fill="#F29C13" rx="2" ry="2"/></g><g><title>StoreIC:A store IC from the snapshot (2 samples, 0.01%)</title><rect width=".1" height="15" x="427.4" y="53" fill="#EB9D00" rx="2" ry="2"/></g><g><title>KeyedLoadIC:A keyed load IC from the snapshot (4 samples, 0.03%)</title><rect width=".3" height="15" x="416.9" y="37" fill="#EAC508" rx="2" ry="2"/></g><g><title>BytecodeHandler:AddSmi (3 samples, 0.02%)</title><rect width=".2" height="15" x="343.3" y="69" fill="#D3691E" rx="2" ry="2"/></g><g><title>BytecodeHandler:InvokeIntrinsic (3 samples, 0.02%)</title><rect width=".2" height="15" x="387.2" y="69" fill="#E34C31" rx="2" ry="2"/></g><g><title>BytecodeHandler:Ldar (6 samples, 0.04%)</title><rect width=".4" height="15" x="419.8" y="69" fill="#EF481F" rx="2" ry="2"/></g><g><title>BytecodeHandler:LdaKeyedProperty (10 samples, 0.06%)</title><rect width=".8" height="15" x="416.4" y="53" fill="#D5A527" rx="2" ry="2"/></g><g><title>BytecodeHandler:LdaKeyedProperty (50 samples, 0.32%)</title><rect width="3.7" height="15" x="391.3" y="69" fill="#EA292E" rx="2" ry="2"/></g><g><title>A native intl.js:41 (5,969 samples, 37.68%)</title><rect width="444.7" height="15" x="510.6" y="53" fill="#D9521B" rx="2" ry="2"/><text x="513.65" y="63.5">A native intl.js:41</text></g><g><title>compare native intl.js:619 (12 samples, 0.08%)</title><rect width=".9" height="15" x="1188.5" y="53" fill="#F5E101" rx="2" ry="2"/></g><g><title>KeyedLoadIC:A keyed load IC from the snapshot (6 samples, 0.04%)</title><rect width=".4" height="15" x="394.6" y="53" fill="#E4061B" rx="2" ry="2"/></g><g><title>BytecodeHandler:StackCheck (2 samples, 0.01%)</title><rect width=".2" height="15" x="427.5" y="69" fill="#D1012F" rx="2" ry="2"/></g><g><title>BytecodeHandler:StaNamedPropertySloppy (5 samples, 0.03%)</title><rect width=".3" height="15" x="425.4" y="69" fill="#F07100" rx="2" ry="2"/></g><g><title>normalizeStringPosix path.js:101 (8 samples, 0.05%)</title><rect width=".6" height="15" x="1189.4" y="69" fill="#D37D32" rx="2" ry="2"/></g><g><title>node (15,841 samples, 100.00%)</title><rect width="1180" height="15" x="10" y="85" fill="#D8E11B" rx="2" ry="2"/><text x="13" y="95.5">node</text></g><g><title>BytecodeHandler:ForInPrepare (3 samples, 0.02%)</title><rect width=".3" height="15" x="386.8" y="69" fill="#CE3812" rx="2" ry="2"/></g><g><title>BytecodeHandler:Construct (118 samples, 0.74%)</title><rect width="8.8" height="15" x="406.9" y="53" fill="#E1360C" rx="2" ry="2"/></g><g><title>AddBoundMethod native intl.js:35 (17 samples, 0.11%)</title><rect width="1.3" height="15" x="341.6" y="69" fill="#ED2F20" rx="2" ry="2"/></g><g><title>BytecodeHandler:TestEqualStrict (5 samples, 0.03%)</title><rect width=".4" height="15" x="427.8" y="69" fill="#D22534" rx="2" ry="2"/></g><g><title>BytecodeHandler:JumpIfToBooleanTrue (4 samples, 0.03%)</title><rect width=".3" height="15" x="388" y="69" fill="#DF0313" rx="2" ry="2"/></g><g><title>BytecodeHandler:TestGreaterThan (2 samples, 0.01%)</title><rect width=".1" height="15" x="419.4" y="53" fill="#D5D536" rx="2" ry="2"/></g><g><title>BytecodeHandler:CallRuntime (266 samples, 1.68%)</title><rect width="19.8" height="15" x="1008.6" y="37" fill="#D3C52C" rx="2" ry="2"/></g><g><title>BytecodeHandler:JumpIfToBooleanTrue (12 samples, 0.08%)</title><rect width=".9" height="15" x="1028.4" y="37" fill="#FB371A" rx="2" ry="2"/></g><g><title>BytecodeHandler:Mov (22 samples, 0.14%)</title><rect width="1.6" height="15" x="1029.8" y="37" fill="#E36219" rx="2" ry="2"/></g><g><title>BytecodeHandler:CallUndefinedReceiver1 (2 samples, 0.01%)</title><rect width=".1" height="15" x="345.3" y="69" fill="#E7810A" rx="2" ry="2"/></g><g><title>BytecodeHandler:Construct (509 samples, 3.21%)</title><rect width="37.9" height="15" x="345.7" y="69" fill="#EB2E1C" rx="2" ry="2"/><text x="348.65" y="79.5">Byt..</text></g><g><title>BytecodeHandler:JumpIfToBooleanFalse (7 samples, 0.04%)</title><rect width=".5" height="15" x="387.5" y="69" fill="#EA9F21" rx="2" ry="2"/></g><g><title>A native intl.js:41 (22 samples, 0.14%)</title><rect width="1.6" height="15" x="340" y="69" fill="#EE9120" rx="2" ry="2"/></g><g><title>KeyedStoreIC:A keyed store IC from the snapshot (3 samples, 0.02%)</title><rect width=".3" height="15" x="424.8" y="53" fill="#FB471F" rx="2" ry="2"/></g><g><title>BytecodeHandler:LdaNamedProperty (149 samples, 0.94%)</title><rect width="11.1" height="15" x="395.1" y="69" fill="#EB0D31" rx="2" ry="2"/></g><g><title>BytecodeHandler:Return (4 samples, 0.03%)</title><rect width=".3" height="15" x="420.4" y="69" fill="#D7CF12" rx="2" ry="2"/></g><g><title>all (15,841 samples, 100%)</title><rect width="1180" height="15" x="10" y="101" fill="#DF861F" rx="2" ry="2"/></g><g><title>BytecodeHandler:LdaNamedProperty (5 samples, 0.03%)</title><rect width=".4" height="15" x="383.8" y="53" fill="#F24626" rx="2" ry="2"/></g><g><title>BytecodeHandler:Ldar (6 samples, 0.04%)</title><rect width=".5" height="15" x="1029.3" y="37" fill="#ED7113" rx="2" ry="2"/></g><g><title>BytecodeHandler:Construct.Wide (3 samples, 0.02%)</title><rect width=".2" height="15" x="383.6" y="69" fill="#DD262D" rx="2" ry="2"/></g><g><title>get /usr/src/app/node_modules/fast-levenshtein/levenshtein.js:27 (10,213 samples, 64.47%)</title><rect width="760.8" height="15" x="428.6" y="69" fill="#E7931F" rx="2" ry="2"/><text x="431.64" y="79.5">get /usr/src/app/node_modules/fast-levenshtein/levenshtein.js:27</text></g><g><title>BytecodeHandler:LdaImmutableContextSlot (2 samples, 0.01%)</title><rect width=".1" height="15" x="390.9" y="69" fill="#ED8714" rx="2" ry="2"/></g><g><title>BytecodeHandler:StaNamedPropertyStrict (2 samples, 0.01%)</title><rect width=".1" height="15" x="419" y="53" fill="#ECD912" rx="2" ry="2"/></g><g><title>Unwrap native intl.js:70 (24 samples, 0.15%)</title><rect width="1.8" height="15" x="1186.7" y="53" fill="#F7B12D" rx="2" ry="2"/></g><g><title>BytecodeHandler:LdaNamedProperty (14 samples, 0.09%)</title><rect width="1" height="15" x="417.2" y="53" fill="#CD5122" rx="2" ry="2"/></g><g><title>BytecodeHandler:StaNamedPropertyStrict (21 samples, 0.13%)</title><rect width="1.6" height="15" x="425.7" y="69" fill="#E51002" rx="2" ry="2"/></g><g><title>BytecodeHandler:CreateArrayLiteral (3 samples, 0.02%)</title><rect width=".2" height="15" x="385" y="69" fill="#EC561A" rx="2" ry="2"/></g><g><title>BytecodeHandler:CallRuntime (20 samples, 0.13%)</title><rect width="1.5" height="15" x="343.7" y="69" fill="#E91E15" rx="2" ry="2"/></g><g><title>BytecodeHandler:CreateRegExpLiteral (2 samples, 0.01%)</title><rect width=".2" height="15" x="386.5" y="69" fill="#F70A24" rx="2" ry="2"/></g><g><title>BytecodeHandler:CallUndefinedReceiver (2 samples, 0.01%)</title><rect width=".2" height="15" x="406.7" y="53" fill="#E8C126" rx="2" ry="2"/></g><g><title>BytecodeHandler:Construct (6 samples, 0.04%)</title><rect width=".4" height="15" x="414.8" y="37" fill="#D0D41C" rx="2" ry="2"/></g><g><title>BytecodeHandler:StaNamedPropertyStrict (3 samples, 0.02%)</title><rect width=".2" height="15" x="415.5" y="37" fill="#F6CA18" rx="2" ry="2"/></g><g><title>BytecodeHandler:LdaImmutableCurrentContextSlot (4 samples, 0.03%)</title><rect width=".3" height="15" x="391" y="69" fill="#D3A01B" rx="2" ry="2"/></g><g><title>BytecodeHandler:StaKeyedPropertyStrict (3 samples, 0.02%)</title><rect width=".3" height="15" x="424.8" y="69" fill="#D6691D" rx="2" ry="2"/></g><g><title>BytecodeHandler:LdaUndefined (2 samples, 0.01%)</title><rect width=".2" height="15" x="418.2" y="53" fill="#FAD131" rx="2" ry="2"/></g><g><title>BytecodeHandler:Construct (16 samples, 0.10%)</title><rect width="1.2" height="15" x="383.8" y="69" fill="#D4B12A" rx="2" ry="2"/></g><g><title>AddBoundMethod native intl.js:35 (3,107 samples, 19.61%)</title><rect width="231.4" height="15" x="955.3" y="53" fill="#F4B80E" rx="2" ry="2"/><text x="958.28" y="63.5">AddBoundMethod native intl.js:35</text></g><g><title>BytecodeHandler:StackCheck (6 samples, 0.04%)</title><rect width=".5" height="15" x="1032.3" y="37" fill="#E7A033" rx="2" ry="2"/></g><g><title>BytecodeHandler:StaKeyedPropertyStrict (5 samples, 0.03%)</title><rect width=".4" height="15" x="418.6" y="53" fill="#FADD2D" rx="2" ry="2"/></g><g><title>BytecodeHandler:CreateObjectLiteral.Wide (2 samples, 0.01%)</title><rect width=".2" height="15" x="415.7" y="53" fill="#F85B06" rx="2" ry="2"/></g><g><title>BytecodeHandler:JumpIfToBooleanFalse (2 samples, 0.01%)</title><rect width=".2" height="15" x="416.1" y="53" fill="#FBC329" rx="2" ry="2"/></g><g><title>BytecodeHandler:CallProperty1 (2 samples, 0.01%)</title><rect width=".1" height="15" x="343.5" y="69" fill="#DD8D1B" rx="2" ry="2"/></g><g><title>BytecodeHandler:StaNamedPropertyStrict (2 samples, 0.01%)</title><rect width=".1" height="15" x="427.4" y="69" fill="#E70703" rx="2" ry="2"/></g><g><title>BytecodeHandler:StaKeyedPropertyStrict (2 samples, 0.01%)</title><rect width=".2" height="15" x="415.3" y="37" fill="#E2D124" rx="2" ry="2"/></g><g><title>BytecodeHandler:StaNamedPropertyStrict (7 samples, 0.04%)</title><rect width=".5" height="15" x="384.4" y="53" fill="#F36D17" rx="2" ry="2"/></g></g></svg>